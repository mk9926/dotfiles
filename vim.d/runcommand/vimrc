set encoding=utf-8
set expandtab tabstop=4 shiftwidth=4
set history=200

set ignorecase
set smartcase
set incsearch
set hlsearch

set nocompatible
set directory=$HOME/tmp,/var/tmp,/tmp

set autoindent
set showmatch
set nu
set ruler
set showmode
set title
set hidden

syntax enable

""""""""""""""""""""""""""""""
"   plugin settings
""""""""""""""""""""""""""""""

if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
    call neobundle#begin(expand('~/.vim/bundle/'))
endif

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'surround.vim'
let g:surround_{char2nr('(')} = "\\(\r\\)"
let g:surround_{char2nr('{')} = "\\{\r\\}"
let g:surround_{char2nr('[')} = "\\[\r\\]"
let g:surround_{char2nr('q')} = "\'\r\'"
let g:surround_{char2nr('d')} = "\"\r\""
let g:surround_{char2nr(':')} = ":\r:"
au FileType tex     :let g:surround_{char2nr('s')} = "\$ \r \$"
au FileType c,cpp   :let g:surround_{char2nr('*')} = "/* \r */"
au FileType haskell :let g:surround_{char2nr('*')} = "{- \r -}"
au FileType coq     :let g:surround_{char2nr('*')} = "(* \r *)"
au FileType vim     :let g:surround_{char2nr('p')} = "%(\r)"

NeoBundle 'rbtnn/puyo.vim'

NeoBundle 'Shougo/vimproc', {
            \   'build' : {
            \       'windows' : 'echo "Sorry, cannot update vimproc binary in windows"',
            \       'cygwin' : 'make -f make_cygwin.mak',
            \       'mac' : 'make -f make_mac.mak',
            \       'unix' : 'make -f make_unix.mak',
            \       }
            \   }

NeoBundle 'Yggdroot/indentLine'
let g:indentLine_color_term=239
let g:indentLine_char='â”Š'

NeoBundle 'Shougo/vimshell.vim'

NeoBundle 'vim-jp/cpp-vim'

NeoBundle 'vimplugin/project.vim'

NeoBundle 'Shougo/unite.vim'
nnoremap <leader>ufl :Unite file<cr>
nnoremap <leader>ufr :Unite file_rec<cr>
nnoremap <leader>uo :Unite output:
nnoremap <leader>ubf :Unite buffer<cr>
nnoremap <leader>ubt :Unite buffer_tab<cr>
nnoremap <leader>ut :Unite tab<cr>
nnoremap <leader>us :Unite source<cr>
nnoremap <leader>ureg :Unite register<cr>
nnoremap <leader>ubm :Unite bookmark<cr>
let g:unite_source_history_yank_enable = 1
nnoremap <leader>uhy :Unite history/yank<cr>


NeoBundle 'vim-scripts/haskell.vim'

NeoBundle 'scrooloose/syntastic'
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2

NeoBundle 'tpope/vim-unimpaired'

NeoBundle 'thinca/vim-quickrun'
let g:quickrun_config = {
            \   '_' : {
            \       'outputter/buffer/split' : ':botright',
            \       'runner' : 'vimproc',
            \       'runner/vimproc/updatetime' : 60
            \   },
            \   'cpp/g++' : {
            \       'cmdopt' : '-std=c++11 -I /opt/local/include/',
            \   },
            \   'haskell' : {
            \       'command' : 'runghc',
            \   }
            \   }

NeoBundle 'jvoorhis/coq.vim'

NeoBundle 'eagletmt/coqtop-vim'

NeoBundle 'vim-jp/vital.vim'

NeoBundle 'jcf/vim-latex'

NeoBundle 'vim-scripts/dbext.vim'

filetype plugin indent on


call neobundle#end()
NeoBundleCheck


""""""""""""""""""""""""""""""
"   my tool settings
""""""""""""""""""""""""""""""

if has('vim_starting')
    set runtimepath+=$HOME/.vim/vim.d/tool/completion/
endif


au FileType c,cpp :set dictionary=$HOME/.vim/vim.d/tool/dict/cpp.dict
au FileType plaintex :set filetype=tex
au FileType tex :set dictionary=$HOME/.vim/vim.d/tool/dict/tex.dict
au FileType tex :source $HOME/.vim/vim.d/runcommand/latex-suiterc.vim
au BufEnter *.v :set filetype=coq
au FileType coq :set dictionary=$HOME/.vim/vim.d/tool/dict/coq.dict
au FileType coq,haskell :set iskeyword+='
au BufLeave :set iskeyword-='
au FileType haskell :set dictionary=$HOME/.vim/vim.d/tool/dict/haskell.dict



""""""""""""""""""""""""""""""
"   mapping
""""""""""""""""""""""""""""""

nnoremap <esc><esc> :nohlsearch<cr>
nnoremap <f2> :Sex $HOME/.vim/vim.d<cr>
nnoremap <down> <c-e>
nnoremap <up> <c-y>
inoremap <c-f> <right>
inoremap <c-b> <left>
cnoremap <expr> <f3> expand('%:p:h') . '/'
inoremap <expr> <f3> expand('%:p:h') . '/'


