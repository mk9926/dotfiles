set encoding=utf-8
set expandtab tabstop=2 shiftwidth=2
set history=200

set ignorecase
set smartcase
set incsearch
set hlsearch

set nocompatible
set directory=$HOME/tmp,/var/tmp,/tmp

set smartindent
set showmatch
set relativenumber
set ruler
set showmode
set notitle
set hidden
set foldmethod=marker

syntax enable

""""""""""""""""""""""""""""""
"   plugin settings
""""""""""""""""""""""""""""""

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
  call neobundle#begin(expand('~/.vim/bundle/'))
endif

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'surround.vim'
let g:surround_{char2nr('(')} = "\\(\r\\)"
let g:surround_{char2nr('{')} = "\\{\r\\}"
let g:surround_{char2nr('[')} = "\\[\r\\]"
let g:surround_{char2nr('q')} = "'\r'"
let g:surround_{char2nr('d')} = "\"\r\""
let g:surround_{char2nr(':')} = ":\r:"
let g:surround_{char2nr('f')} = "{{{\r}}}"
au FileType tex       :let b:surround_{char2nr('s')} = "$ \r $"
au FileType tex       :let b:surround_{char2nr(';')} = "\\; \r \\;"
au FileType tex       :let b:surround_{char2nr('R')} = "\\[ \r \\]"
au FileType tex       :let b:surround_{char2nr('[')} = "\\left[ \r \\right]"
au FileType tex       :let b:surround_{char2nr('(')} = "\\left( \r \\right)"
au FileType tex       :let b:surround_{char2nr('{')} = "\\left\\{ \r \\right\\}"
au FileType tex       :let b:surround_{char2nr('<')} = "\\left< \r \\right>"
au FileType tex       :let b:surround_{char2nr('|')} = "\\left| \r \\right|"
au FileType c,cpp     :let b:surround_{char2nr('*')} = "/* \r */"
au FileType haskell   :let b:surround_{char2nr('*')} = "{- \r -}"
au FileType coq       :let b:surround_{char2nr('*')} = "(* \r *)"
au FileType ocaml     :let b:surround_{char2nr('*')} = "(* \r *)"
au FileType ocaml     :let b:surround_{char2nr('g')} = "sig \r end"
au FileType ocaml     :let b:surround_{char2nr('s')} = "struct \r end"
au FileType ocaml     :let b:surround_{char2nr('l')} = "begin \r end"
au FileType ocaml     :let b:surround_{char2nr('m')} = "begin match \r with\nend"
au FileType vim       :let b:surround_{char2nr('p')} = "%(\r)"
au FileType make      :let b:surround_{char2nr('o')} = "$(\r)"
au FileType markdown  :let b:surround_{char2nr('*')} = "<!-- \r -->"

"NeoBundle 'rbtnn/puyo.vim'

NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\   'windows' : 'tools\\update-dll-mingw',
\   'cygwin' : 'make -f make_cygwin.mak',
\   'mac' : 'make',
\   'linux' : 'make',
\   'unix' : 'gmake',
\  },
\ }

"NeoBundle 'Yggdroot/indentLine'
"let g:indentLine_color_term=239
"let g:indentLine_char='â”Š'

NeoBundle 'Shougo/vimshell.vim'

NeoBundle 'vim-jp/cpp-vim'

NeoBundle 'vimplugin/project.vim'
let g:proj_flags = 'giLmstv'

NeoBundle 'Shougo/unite.vim'
nnoremap [unite] <nop>
nmap <leader>u [unite]
nnoremap [unite]    :Unite 
nnoremap [unite]f   :Unite file<cr>
nnoremap [unite]o   :Unite output:
nnoremap [unite]bf  :Unite buffer<cr>
nnoremap [unite]t   :Unite tab<cr>
nnoremap [unite]s   :Unite source<cr>
nnoremap [unite]r   :Unite register<cr>
nnoremap [unite]bm  :Unite bookmark:
"let g:unite_source_history_yank_enable = 1

NeoBundle 'Shougo/neoyank.vim'
nnoremap [unite]hy  :Unite history/yank<cr>
nnoremap [unite]hu  :Unite history/unite<cr>


NeoBundle 'vim-scripts/haskell.vim'

NeoBundle 'scrooloose/syntastic'
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2

NeoBundle 'tpope/vim-unimpaired'

NeoBundle 'thinca/vim-quickrun'
let g:quickrun_config = {
      \ '_' : {
      \   'outputter/buffer/split' : ':botright',
      \   'runner' : 'vimproc',
      \   'runner/vimproc/updatetime' : 60
      \ },
      \ 'cpp/g++' : {
      \   'cmdopt' : '-std=c++11 -I /opt/local/include/',
      \ },
      \ 'haskell' : {
      \   'command' : 'runghc',
      \ },
      \ 'ocaml' : {
      \   'cmdopt' : '-I `camlp5 -where`'
      \ }
      \ }

NeoBundle 'jvoorhis/coq.vim'

"NeoBundle 'eagletmt/coqtop-vim'
NeoBundle 'mskm9926/coqtop-vim'

"NeoBundle 'vim-scripts/CoqIDE'

"NeoBundle 'let-def/vimbufsync'
"NeoBundle 'the-lambda-church/coquille'
"au FileType coq call coquille#FNMapping()

NeoBundle 'vim-jp/vital.vim'

NeoBundle 'jcf/vim-latex'

NeoBundle 'vim-scripts/dbext.vim'

NeoBundle 'Shougo/vimfiler'
let g:vimfiler_enable_auto_cd = 1
nnoremap [vimfiler] <nop>
nmap <leader>f [vimfiler]
nnoremap [vimfiler]f :VimFiler<cr>
nnoremap [vimfiler]b :VimFilerBufferDir<cr>

NeoBundle 'itchyny/vim-haskell-indent'

NeoBundle 'gilligan/vim-lldb'

NeoBundle 'FStarLang/VimFStar'

filetype plugin indent on


call neobundle#end()
NeoBundleCheck


""""""""""""""""""""""""""""""
"   my tool settings
""""""""""""""""""""""""""""""

if has('vim_starting')
  set runtimepath+=$HOME/.vim/vim.d/tool/myplugins/completion/
  set runtimepath+=$HOME/.vim/vim.d/tool/myplugins/scripts/
  "set runtimepath+=$HOME/tool/Vimscript/mcproject.vim/
  "set runtimepath+=$HOME/tool/Parser/pigeon/
endif



au FileType c,cpp       :setl dictionary=$HOME/.vim/vim.d/tool/dict/cpp.dict
au FileType plaintex    :setl filetype=tex
au FileType tex         :setl dictionary=$HOME/.vim/vim.d/tool/dict/tex.dict
au FileType tex         :source $HOME/.vim/vim.d/runcommand/latex-suiterc.vim
au FileType tex         :setl iskeyword+=-
au FileType tex         :setl iskeyword+=_
au BufEnter *.v         :setl filetype=coq
au FileType coq         :setl iskeyword+='
au FileType coq         :setl dictionary=$HOME/.vim/vim.d/tool/dict/coq.dict
au FileType ocaml       :setl iskeyword+='
au FileType ocaml       :setl dictionary=$HOME/.vim/vim.d/tool/dict/ocaml.dict
au FileType haskell     :setl iskeyword+='
au FileType haskell     :setl dictionary=$HOME/.vim/vim.d/tool/dict/haskell.dict
au FileType gp          :setl dictionary=/Users/masa/.vim/vim.d/tool/dict/gnuplot.dict
au FileType awk         :setl dictionary=/Users/masa/dotfiles/vim.d/tool/dict/awk.dict


""""""""""""""""""""""""""""""
"   mapping
""""""""""""""""""""""""""""""

nnoremap <silent> <esc><esc> :nohlsearch<cr>
nnoremap <f2> :Sex $HOME/.vim/vim.d<cr>
"nnoremap <up> <c-y>
"nnoremap <down> <c-e>
inoremap <c-f> <right>
inoremap <c-b> <left>
nnoremap <f3> :let @+ = expand('%:p:h')<cr>
cnoremap <expr> <f3> expand('%:p:h') . '/'
inoremap <expr> <f3> expand('%:p:h') . '/'
cnoremap <expr> <f4> getcwd() . '/'
inoremap <expr> <f4> getcwd() . '/'


