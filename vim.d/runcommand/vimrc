
set nocompatible


let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = expand('~/.cache/dein/repos/github.com/Shougo/dein.vim')
let s:dein_toml = expand('~/dotfiles/vim.d/runcommand/dein.toml')

execute 'set runtimepath+=' . s:dein_repo_dir

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)
  call dein#load_toml(s:dein_toml, {'lazy': 0})
  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on
syntax enable

" deoplete.nvim
inoremap <f1> <C-o>:call deoplete#toggle()<cr>
au FileType tex   :call deoplete#disable()

" surround.vim
"
let g:surround_{char2nr('(')} = "\\(\r\\)"
let g:surround_{char2nr('{')} = "\\{\r\\}"
let g:surround_{char2nr('[')} = "\\[\r\\]"
let g:surround_{char2nr('q')} = "'\r'"
let g:surround_{char2nr('d')} = "\"\r\""
let g:surround_{char2nr(':')} = ":\r:"
let g:surround_{char2nr('f')} = "{{{\r}}}"
au FileType tex       :let b:surround_{char2nr('s')} = "$ \r $"
au FileType tex       :let b:surround_{char2nr(';')} = "\\; \r \\;"
au FileType tex       :let b:surround_{char2nr('R')} = "\\[ \r \\]"
au FileType tex       :let b:surround_{char2nr('[')} = "\\left[ \r \\right]"
au FileType tex       :let b:surround_{char2nr('(')} = "\\left( \r \\right)"
au FileType tex       :let b:surround_{char2nr('{')} = "\\left\\{ \r \\right\\}"
au FileType tex       :let b:surround_{char2nr('<')} = "\\left< \r \\right>"
au FileType tex       :let b:surround_{char2nr('|')} = "\\left| \r \\right|"
au FileType c,cpp     :let b:surround_{char2nr('*')} = "/* \r */"
au FileType haskell   :let b:surround_{char2nr('*')} = "{- \r -}"
au FileType coq       :let b:surround_{char2nr('*')} = "(* \r *)"
au FileType ocaml     :let b:surround_{char2nr('*')} = "(* \r *)"
au FileType ocaml     :let b:surround_{char2nr('g')} = "sig \r end"
au FileType ocaml     :let b:surround_{char2nr('s')} = "struct \r end"
au FileType ocaml     :let b:surround_{char2nr('l')} = "begin \r end"
au FileType ocaml     :let b:surround_{char2nr('m')} = "begin match \r with\nend"
au FileType vim       :let b:surround_{char2nr('p')} = "%(\r)"
au FileType make      :let b:surround_{char2nr('o')} = "$(\r)"
au FileType markdown  :let b:surround_{char2nr('*')} = "<!-- \r -->"
au FileType fsharp    :let b:surround_{char2nr('*')} = "(* \r *)"
au FileType fsharp    :let b:surround_{char2nr('[')} = "[|\r|]"
au FileType satysfi   :let b:surround_{char2nr('s')} = "${ \r }"
au FileType satysfi   :let b:surround_{char2nr('<')} = "'< \r >"
au FileType satysfi   :let b:surround_{char2nr('e')} = "\\eqn(\r);%"

"" unite.vim
""
"nnoremap [unite] <nop>
"nmap <leader>u [unite]
"nnoremap [unite]    :Unite 
"nnoremap [unite]f   :Unite file<cr>
"nnoremap [unite]o   :Unite output:
"nnoremap [unite]bf  :Unite buffer<cr>
"nnoremap [unite]t   :Unite tab<cr>
"nnoremap [unite]s   :Unite source<cr>
"nnoremap [unite]r   :Unite register<cr>
"nnoremap [unite]bm  :Unite bookmark:




"vim-quickrun
let g:quickrun_config = {
      \ '_' : {
      \   'outputter/buffer/split' : ':botright',
      \   'runner' : 'vimproc',
      \   'runner/vimproc/updatetime' : 60
      \ },
      \ 'cpp/g++' : {
      \   'cmdopt' : '-std=c++11 -I /opt/local/include/',
      \ },
      \ 'haskell' : {
      \   'command' : 'runghc',
      \ },
      \ 'ocaml' : {
      \   'cmdopt' : '-I `camlp5 -where`'
      \ },
      \ 'fsharp' : {
      \   'command' : 'fsharpi --readline-',
      \   'tempfile' : '%{tempname()}.fsx',
      \   'runner' : 'concurrent_process',
      \   'runner/concurrent_process/load' : '#load "%S";;',
      \   'runner/concurrent_process/prompt' : '> ',
      \ }
      \ }

"project.vim
let g:proj_flags = 'giLmstv'

""neoyank.vim
"nnoremap [unite]hy  :Unite history/yank<cr>
"nnoremap [unite]hu  :Unite history/unite<cr>

"synatastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2

""vimfiler
"let g:vimfiler_enable_auto_cd = 1
"nnoremap [vimfiler] <nop>
"nmap <leader>f [vimfiler]
"nnoremap [vimfiler]f :VimFiler<cr>
"nnoremap [vimfiler]b :VimFilerBufferDir<cr>

"vim-fsharp
let g:syntastic_fsharp_checkers=['syntax']
let g:syntastic_only_check_errors_on_write = 1
let g:fsharpbinding_debug = 1
let g:fsharp_interactive_bin = '/usr/local/bin/fsharpi'
let g:fsharp_completion_helptext = 1
let g:fsharp_helptext_comments = 1
let g:fsharp_map_prefix = '\m'
let g:fsharp_map_gotodecl = 'g'
let g:fsharp_map_gobackfromdecl = 'b'
let g:fsharp_map_fsiinput = 'i'

"Language-Client-neovim


set encoding=utf-8
set expandtab tabstop=2 shiftwidth=2
set history=200

set ignorecase
set smartcase
set incsearch
set hlsearch

set directory=$HOME/tmp,/var/tmp,/tmp

set autoindent
set showmatch
set relativenumber
set ruler
set showmode
set notitle
set hidden
set foldmethod=marker
set isfname-==



"
"filetype plugin indent on
"
"
"call neobundle#end()
"NeoBundleCheck


""""""""""""""""""""""""""""""
"   my tool settings
""""""""""""""""""""""""""""""

if has('vim_starting')
  set runtimepath+=$HOME/.vim/vim.d/tool/myplugins/completion/
  set runtimepath+=$HOME/.vim/vim.d/tool/myplugins/scripts/
  "set runtimepath+=$HOME/tool/Vimscript/mcproject.vim/
  "set runtimepath+=$HOME/tool/Parser/pigeon/
endif



au FileType c,cpp       :setl dictionary=$HOME/.vim/vim.d/tool/dict/cpp.dict
au FileType plaintex    :setl filetype=tex
au FileType tex         :setl dictionary=$HOME/.vim/vim.d/tool/dict/tex.dict
au FileType tex         :source $HOME/.vim/vim.d/runcommand/latex-suiterc.vim
au FileType tex         :setl iskeyword+=-
au FileType tex         :setl iskeyword+=_
au BufEnter *.v         :setl filetype=coq
au FileType coq         :setl iskeyword+='
au FileType ocaml       :setl iskeyword+='
au FileType haskell     :setl iskeyword+='
au FileType coq         :setl dictionary=$HOME/dotfiles/vim.d/tool/dict/coq.dict
au FileType ocaml       :setl dictionary=$HOME/dotfiles/vim.d/tool/dict/ocaml.dict
au FileType haskell     :setl dictionary=$HOME/dotfiles/vim.d/tool/dict/haskell.dict
au FileType gp          :setl dictionary=$HOME/dotfiles/vim.d/tool/dict/gnuplot.dict
au FileType awk         :setl dictionary=$HOME/dotfiles/vim.d/tool/dict/awk.dict
au FileType fsharp      :setl dictionary=$HOME/dotfiles/vim.d/tool/dict/f.dict
au FileType fstar       :setl dictionary=
au FileType satysfi     :setl dictionary=$HOME/dotfiles/vim.d/tool/dict/satysfi.dict



""""""""""""""""""""""""""""""
"   mapping
""""""""""""""""""""""""""""""

nnoremap <silent> <esc><esc> :nohlsearch<cr>
nnoremap <f2> :Sex $HOME/.vim/vim.d<cr>
inoremap <c-f> <right>
inoremap <c-b> <left>
nnoremap <f3> :let @+ = expand('%:p:h')<cr>
cnoremap <expr> <f3> expand('%:p:h') . '/'
inoremap <expr> <f3> expand('%:p:h') . '/'
cnoremap <expr> <f4> getcwd() . '/'

