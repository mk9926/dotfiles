
LANGUAGE
ExistentialQuantification

fromRational
Regex
Posix
AppendMode
Applicative
Bool
ByteString
Char
Char8
Control
Data
Directory
Double
EQ
Enum
Environment
Eq
Exception
False
FilePath
Float
Floating
Functor
GT
Handle
IO
IOMode
Int
Integer
Integral
Just
LT
Lazy
List
Map
Maybe
Monad
Nothing
Num
Ord
Random
RandomGen
Read
ReadMode
ReadWriteMode
Set
Show
StdGen
String
System
Text
True
Word8
WriteMode
any
appendFile
as
bracket
bracketOnError
case
chr
deriving
digitToInt
div
do
drop
elem
else
filter
find
flip
foldl
foldl'
foldl1
foldr
foldr'
foldr1
forM
forever
fromIntegral
fromList
fromListWith
fst
getArgs
getContents
getProgName
getStdGen
group
hClose
hGetChar
hGetContents
hGetLine
hPutStr
hPutStrLn
head
hiding
if
import
in
init
insert
interact
isPrefixOf
last
length
let
lookup
map
mapM
mapM_
max
maxBound
maximum
min
minBound
minimum
mkStdGen
module
not
nub
null
of
openFile
openTempFile
ord
otherwise
pack
print
product
putStr
putStrLn
qualified
random
randomR
randomRs
randoms
read
readFile
reads
removeFile
renameFile
repeat
replicate
reverse
scanl
scanl1
scanr
scanr1
show
size
snd
sort
subtract
succ
sum
tail
tails
take
takeWhile
then
toUpper
unless
unpack
when
where
withFile
words
writeFile
zip
zipWith
