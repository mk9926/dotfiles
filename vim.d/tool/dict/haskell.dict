
True
False
not
succ
min
max
div
if
else
then
head
tail
last
init
length
null
reverse
take
drop
maximum
minimum
sum
product
elem
replicate
fst
snd
zip
Int
Integer
Float
Double
Bool
Char
Eq
Ord
Show
Read
read
show
Enum
LT
EQ
GT
minBound
maxBound
Num
Floating
Integral
fromIntegral
otherwise
where
let
in
case
of
repeat
subtract
zipWith
flip
map
filter
takeWhile
module
import
Data
List
nub
sort
hiding
Map
Set
qualified
as
words
group
tails
isPrefixOf
any
ord
chr
foldl
foldl1
foldl'
foldr
foldr1
foldr'
scanl
scanl1
scanr
scanr1
digitToInt
find
Maybe
Just
Nothing
lookup
fromList
fromListWith
insert
size
deriving
Control
Monad
do
putStr
putStrLn
print
mapM
mapM_
forM
when
forever
getContents
toUpper
interact
System
IO
FilePath
IOMode
openFile
ReadMode
WriteMode
AppendMode
ReadWriteMode
Handle
hGetContents
hClose
withFile
hGetLine
hPutStr
hPutStrLn
hGetChar
readFile
writeFile
appendFile
Directory
openTempFile
removeFile
renameFile
Exception
bracket
bracketOnError
Environment
getArgs
getProgName
Random
random
randoms
randomR
randomRs
StdGen
RandomGen
mkStdGen
getStdGen
reads
unless
ByteString
Lazy
Char8
pack
unpack
Word8







